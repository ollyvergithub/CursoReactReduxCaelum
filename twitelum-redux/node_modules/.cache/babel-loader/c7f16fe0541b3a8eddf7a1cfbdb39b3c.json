{"ast":null,"code":"import _defineProperty from \"/home/react8582/Desktop/cursoCaelumReactRedux/twitelum-redux/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { TweetsService } from \"../../../services/TweetsService\";\nexport const TweetsThunkActions = {\n  carregaTweets: () => {\n    return dispatch => {\n      dispatch({\n        type: \"tweets/CARREGA\"\n      });\n      TweetsService.carrega().then(tweets => {\n        dispatch({\n          type: \"tweets/CARREGA_SUCESSO\",\n          payload: {\n            data: tweets\n          }\n        });\n      }).catch(() => {\n        dispatch({\n          type: \"tweets/CARREGA_FALHOU\"\n        });\n      });\n    };\n  }\n};\nconst INITIAL_STATE = {\n  data: [],\n  loading: false,\n  error: false\n};\nexport function tweetsReducer(state = INITIAL_STATE, action = {}) {\n  if (action.type === \"tweets/CARREGA\") {\n    return _objectSpread({}, state, {\n      loading: true\n    });\n  }\n\n  if (action.type === \"tweets/CARREGA_SUCESSO\") {\n    const tweets = action.payload.data;\n    return _objectSpread({}, state, {\n      data: tweets,\n      error: false\n    });\n  }\n\n  if (action.type === \"tweets/CARREGA_FALHOU\") {\n    return _objectSpread({}, state, {\n      data: [],\n      error: true\n    });\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/react8582/Desktop/cursoCaelumReactRedux/twitelum-redux/src/store/ducks/tweets/index.js"],"names":["TweetsService","TweetsThunkActions","carregaTweets","dispatch","type","carrega","then","tweets","payload","data","catch","INITIAL_STATE","loading","error","tweetsReducer","state","action"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,iCAA9B;AAEA,OAAO,MAAMC,kBAAkB,GAAG;AAE9BC,EAAAA,aAAa,EAAE,MAAM;AACjB,WAAOC,QAAQ,IAAI;AACfA,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAD,CAAR;AAEAJ,MAAAA,aAAa,CAACK,OAAd,GACCC,IADD,CACMC,MAAM,IAAI;AACZJ,QAAAA,QAAQ,CAAC;AACLC,UAAAA,IAAI,EAAE,wBADD;AAELI,UAAAA,OAAO,EAAE;AAAEC,YAAAA,IAAI,EAAEF;AAAR;AAFJ,SAAD,CAAR;AAIH,OAND,EAOCG,KAPD,CAOQ,MAAM;AACVP,QAAAA,QAAQ,CAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAF,CAAR;AACH,OATD;AAUH,KAbD;AAcH;AAjB6B,CAA3B;AAoBP,MAAMO,aAAa,GAAG;AAClBF,EAAAA,IAAI,EAAE,EADY;AAElBG,EAAAA,OAAO,EAAE,KAFS;AAGlBC,EAAAA,KAAK,EAAE;AAHW,CAAtB;AAMA,OAAO,SAASC,aAAT,CAAuBC,KAAK,GAAGJ,aAA/B,EAA8CK,MAAM,GAAG,EAAvD,EAA0D;AAC7D,MAAGA,MAAM,CAACZ,IAAP,KAAgB,gBAAnB,EAAoC;AAChC,6BACOW,KADP;AAEIH,MAAAA,OAAO,EAAE;AAFb;AAIH;;AAED,MAAGI,MAAM,CAACZ,IAAP,KAAe,wBAAlB,EAA2C;AACvC,UAAMG,MAAM,GAAGS,MAAM,CAACR,OAAP,CAAeC,IAA9B;AACA,6BACOM,KADP;AAEIN,MAAAA,IAAI,EAAEF,MAFV;AAGIM,MAAAA,KAAK,EAAE;AAHX;AAKH;;AAED,MAAGG,MAAM,CAACZ,IAAP,KAAgB,uBAAnB,EAA2C;AACvC,6BACOW,KADP;AAEIN,MAAAA,IAAI,EAAE,EAFV;AAGII,MAAAA,KAAK,EAAE;AAHX;AAKH;;AAED,SAAOE,KAAP;AACH","sourcesContent":["import { TweetsService } from \"../../../services/TweetsService\"\n\nexport const TweetsThunkActions = {\n\n    carregaTweets: () => {\n        return dispatch => {\n            dispatch({type: \"tweets/CARREGA\"});\n\n            TweetsService.carrega()\n            .then(tweets => {\n                dispatch({\n                    type: \"tweets/CARREGA_SUCESSO\",\n                    payload: { data: tweets}\n                });\n            })\n            .catch( () => {\n                dispatch( { type: \"tweets/CARREGA_FALHOU\"})\n            })\n        }\n    }\n}\n\nconst INITIAL_STATE = {\n    data: [],\n    loading: false,\n    error: false,\n}\n\nexport function tweetsReducer(state = INITIAL_STATE, action = {}){\n    if(action.type === \"tweets/CARREGA\"){\n        return{\n            ...state,\n            loading: true\n        }\n    }\n\n    if(action.type ===\"tweets/CARREGA_SUCESSO\"){\n        const tweets = action.payload.data;\n        return {\n            ...state,\n            data: tweets,\n            error: false,\n        }\n    }\n\n    if(action.type === \"tweets/CARREGA_FALHOU\"){\n        return {\n            ...state,\n            data: [],\n            error: true,\n        }\n    }\n\n    return state\n}"]},"metadata":{},"sourceType":"module"}