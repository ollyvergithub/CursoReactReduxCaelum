{"ast":null,"code":"import ApiConfig from '../ApiConfig';\nconst LoginService = {\n  logar({\n    login,\n    senha\n  }) {\n    return fetch(\"\".concat(ApiConfig.url, \"/login\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        login,\n        senha\n      })\n    }).then(async responseDoServer => {\n      if (!responseDoServer.ok) {\n        const respostaDeErroDoServidor = await responseDoServer.json();\n        const errorObj = Error(respostaDeErroDoServidor.message);\n        errorObj.status = responseDoServer.status;\n        throw errorObj;\n      }\n\n      return responseDoServer.json();\n    }).then(dadosDoServidorEmObj => {\n      const token = dadosDoServidorEmObj.token;\n\n      if (token) {\n        localStorage.setItem(\"TOKEN\", token);\n        return;\n      }\n\n      throw new Error(\"Token não existe\");\n    });\n  }\n\n};\nexport default LoginService;","map":{"version":3,"sources":["/home/react8582/Desktop/cursoCaelumReactRedux/twitelum-redux/src/services/LoginService.js"],"names":["ApiConfig","LoginService","logar","login","senha","fetch","url","method","headers","body","JSON","stringify","then","responseDoServer","ok","respostaDeErroDoServidor","json","errorObj","Error","message","status","dadosDoServidorEmObj","token","localStorage","setItem"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,KAAK,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAgB;AACjB,WAAOC,KAAK,WAAIL,SAAS,CAACM,GAAd,aAA2B;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF0B;AAKnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAER,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAf;AAL6B,KAA3B,CAAL,CAMJQ,IANI,CAMC,MAAMC,gBAAN,IAA0B;AAC9B,UAAG,CAACA,gBAAgB,CAACC,EAArB,EAAwB;AACpB,cAAMC,wBAAwB,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,EAAvC;AACA,cAAMC,QAAQ,GAAGC,KAAK,CAACH,wBAAwB,CAACI,OAA1B,CAAtB;AACAF,QAAAA,QAAQ,CAACG,MAAT,GAAkBP,gBAAgB,CAACO,MAAnC;AACA,cAAMH,QAAN;AACH;;AACD,aAAOJ,gBAAgB,CAACG,IAAjB,EAAP;AAEH,KAfM,EAeJJ,IAfI,CAeCS,oBAAoB,IAAG;AAC3B,YAAMC,KAAK,GAAGD,oBAAoB,CAACC,KAAnC;;AACA,UAAGA,KAAH,EAAS;AACLC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACA;AACH;;AAED,YAAO,IAAIJ,KAAJ,CAAU,kBAAV,CAAP;AACH,KAvBM,CAAP;AAwBH;;AA3BgB,CAArB;AA8BA,eAAejB,YAAf","sourcesContent":["import ApiConfig from '../ApiConfig'\n\nconst LoginService = {\n\n    logar({login, senha}){\n        return fetch(`${ApiConfig.url}/login`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({ login, senha })\n        }).then(async responseDoServer => {\n            if(!responseDoServer.ok){\n                const respostaDeErroDoServidor = await responseDoServer.json()\n                const errorObj = Error(respostaDeErroDoServidor.message)\n                errorObj.status = responseDoServer.status\n                throw errorObj\n            }\n            return responseDoServer.json()\n\n        }).then(dadosDoServidorEmObj =>{\n            const token = dadosDoServidorEmObj.token\n            if(token){\n                localStorage.setItem(\"TOKEN\", token)\n                return;\n            }\n\n            throw  new Error(\"Token não existe\")\n        })\n    }\n}\n\nexport default LoginService"]},"metadata":{},"sourceType":"module"}